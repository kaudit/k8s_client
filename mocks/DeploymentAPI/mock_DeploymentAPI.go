// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocksapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/apps/v1"
)

// MockDeploymentAPI is an autogenerated mock type for the DeploymentAPI type
type MockDeploymentAPI struct {
	mock.Mock
}

type MockDeploymentAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeploymentAPI) EXPECT() *MockDeploymentAPI_Expecter {
	return &MockDeploymentAPI_Expecter{mock: &_m.Mock}
}

// GetDeploymentByName provides a mock function with given fields: ctx, namespace, name
func (_m *MockDeploymentAPI) GetDeploymentByName(ctx context.Context, namespace string, name string) (*v1.Deployment, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentByName")
	}

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.Deployment, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Deployment); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeploymentAPI_GetDeploymentByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentByName'
type MockDeploymentAPI_GetDeploymentByName_Call struct {
	*mock.Call
}

// GetDeploymentByName is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockDeploymentAPI_Expecter) GetDeploymentByName(ctx interface{}, namespace interface{}, name interface{}) *MockDeploymentAPI_GetDeploymentByName_Call {
	return &MockDeploymentAPI_GetDeploymentByName_Call{Call: _e.mock.On("GetDeploymentByName", ctx, namespace, name)}
}

func (_c *MockDeploymentAPI_GetDeploymentByName_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockDeploymentAPI_GetDeploymentByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDeploymentAPI_GetDeploymentByName_Call) Return(_a0 *v1.Deployment, _a1 error) *MockDeploymentAPI_GetDeploymentByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeploymentAPI_GetDeploymentByName_Call) RunAndReturn(run func(context.Context, string, string) (*v1.Deployment, error)) *MockDeploymentAPI_GetDeploymentByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploymentsByField provides a mock function with given fields: ctx, namespace, fieldSelector
func (_m *MockDeploymentAPI) ListDeploymentsByField(ctx context.Context, namespace string, fieldSelector string) ([]v1.Deployment, error) {
	ret := _m.Called(ctx, namespace, fieldSelector)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentsByField")
	}

	var r0 []v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]v1.Deployment, error)); ok {
		return rf(ctx, namespace, fieldSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []v1.Deployment); ok {
		r0 = rf(ctx, namespace, fieldSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, fieldSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeploymentAPI_ListDeploymentsByField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploymentsByField'
type MockDeploymentAPI_ListDeploymentsByField_Call struct {
	*mock.Call
}

// ListDeploymentsByField is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - fieldSelector string
func (_e *MockDeploymentAPI_Expecter) ListDeploymentsByField(ctx interface{}, namespace interface{}, fieldSelector interface{}) *MockDeploymentAPI_ListDeploymentsByField_Call {
	return &MockDeploymentAPI_ListDeploymentsByField_Call{Call: _e.mock.On("ListDeploymentsByField", ctx, namespace, fieldSelector)}
}

func (_c *MockDeploymentAPI_ListDeploymentsByField_Call) Run(run func(ctx context.Context, namespace string, fieldSelector string)) *MockDeploymentAPI_ListDeploymentsByField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDeploymentAPI_ListDeploymentsByField_Call) Return(_a0 []v1.Deployment, _a1 error) *MockDeploymentAPI_ListDeploymentsByField_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeploymentAPI_ListDeploymentsByField_Call) RunAndReturn(run func(context.Context, string, string) ([]v1.Deployment, error)) *MockDeploymentAPI_ListDeploymentsByField_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploymentsByLabel provides a mock function with given fields: ctx, namespace, labelSelector
func (_m *MockDeploymentAPI) ListDeploymentsByLabel(ctx context.Context, namespace string, labelSelector string) ([]v1.Deployment, error) {
	ret := _m.Called(ctx, namespace, labelSelector)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentsByLabel")
	}

	var r0 []v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]v1.Deployment, error)); ok {
		return rf(ctx, namespace, labelSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []v1.Deployment); ok {
		r0 = rf(ctx, namespace, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeploymentAPI_ListDeploymentsByLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploymentsByLabel'
type MockDeploymentAPI_ListDeploymentsByLabel_Call struct {
	*mock.Call
}

// ListDeploymentsByLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - labelSelector string
func (_e *MockDeploymentAPI_Expecter) ListDeploymentsByLabel(ctx interface{}, namespace interface{}, labelSelector interface{}) *MockDeploymentAPI_ListDeploymentsByLabel_Call {
	return &MockDeploymentAPI_ListDeploymentsByLabel_Call{Call: _e.mock.On("ListDeploymentsByLabel", ctx, namespace, labelSelector)}
}

func (_c *MockDeploymentAPI_ListDeploymentsByLabel_Call) Run(run func(ctx context.Context, namespace string, labelSelector string)) *MockDeploymentAPI_ListDeploymentsByLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDeploymentAPI_ListDeploymentsByLabel_Call) Return(_a0 []v1.Deployment, _a1 error) *MockDeploymentAPI_ListDeploymentsByLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeploymentAPI_ListDeploymentsByLabel_Call) RunAndReturn(run func(context.Context, string, string) ([]v1.Deployment, error)) *MockDeploymentAPI_ListDeploymentsByLabel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeploymentAPI creates a new instance of MockDeploymentAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeploymentAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeploymentAPI {
	mock := &MockDeploymentAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

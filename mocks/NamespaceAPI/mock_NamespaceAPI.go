// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocksapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// MockNamespaceAPI is an autogenerated mock type for the NamespaceAPI type
type MockNamespaceAPI struct {
	mock.Mock
}

type MockNamespaceAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamespaceAPI) EXPECT() *MockNamespaceAPI_Expecter {
	return &MockNamespaceAPI_Expecter{mock: &_m.Mock}
}

// GetNamespaceByName provides a mock function with given fields: ctx, name
func (_m *MockNamespaceAPI) GetNamespaceByName(ctx context.Context, name string) (*v1.Namespace, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespaceByName")
	}

	var r0 *v1.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.Namespace, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.Namespace); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespaceAPI_GetNamespaceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaceByName'
type MockNamespaceAPI_GetNamespaceByName_Call struct {
	*mock.Call
}

// GetNamespaceByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockNamespaceAPI_Expecter) GetNamespaceByName(ctx interface{}, name interface{}) *MockNamespaceAPI_GetNamespaceByName_Call {
	return &MockNamespaceAPI_GetNamespaceByName_Call{Call: _e.mock.On("GetNamespaceByName", ctx, name)}
}

func (_c *MockNamespaceAPI_GetNamespaceByName_Call) Run(run func(ctx context.Context, name string)) *MockNamespaceAPI_GetNamespaceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNamespaceAPI_GetNamespaceByName_Call) Return(_a0 *v1.Namespace, _a1 error) *MockNamespaceAPI_GetNamespaceByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespaceAPI_GetNamespaceByName_Call) RunAndReturn(run func(context.Context, string) (*v1.Namespace, error)) *MockNamespaceAPI_GetNamespaceByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespacesByField provides a mock function with given fields: ctx, fieldSelector
func (_m *MockNamespaceAPI) ListNamespacesByField(ctx context.Context, fieldSelector string) ([]v1.Namespace, error) {
	ret := _m.Called(ctx, fieldSelector)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespacesByField")
	}

	var r0 []v1.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]v1.Namespace, error)); ok {
		return rf(ctx, fieldSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []v1.Namespace); ok {
		r0 = rf(ctx, fieldSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fieldSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespaceAPI_ListNamespacesByField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespacesByField'
type MockNamespaceAPI_ListNamespacesByField_Call struct {
	*mock.Call
}

// ListNamespacesByField is a helper method to define mock.On call
//   - ctx context.Context
//   - fieldSelector string
func (_e *MockNamespaceAPI_Expecter) ListNamespacesByField(ctx interface{}, fieldSelector interface{}) *MockNamespaceAPI_ListNamespacesByField_Call {
	return &MockNamespaceAPI_ListNamespacesByField_Call{Call: _e.mock.On("ListNamespacesByField", ctx, fieldSelector)}
}

func (_c *MockNamespaceAPI_ListNamespacesByField_Call) Run(run func(ctx context.Context, fieldSelector string)) *MockNamespaceAPI_ListNamespacesByField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNamespaceAPI_ListNamespacesByField_Call) Return(_a0 []v1.Namespace, _a1 error) *MockNamespaceAPI_ListNamespacesByField_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespaceAPI_ListNamespacesByField_Call) RunAndReturn(run func(context.Context, string) ([]v1.Namespace, error)) *MockNamespaceAPI_ListNamespacesByField_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespacesByLabel provides a mock function with given fields: ctx, labelSelector
func (_m *MockNamespaceAPI) ListNamespacesByLabel(ctx context.Context, labelSelector string) ([]v1.Namespace, error) {
	ret := _m.Called(ctx, labelSelector)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespacesByLabel")
	}

	var r0 []v1.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]v1.Namespace, error)); ok {
		return rf(ctx, labelSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []v1.Namespace); ok {
		r0 = rf(ctx, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespaceAPI_ListNamespacesByLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespacesByLabel'
type MockNamespaceAPI_ListNamespacesByLabel_Call struct {
	*mock.Call
}

// ListNamespacesByLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - labelSelector string
func (_e *MockNamespaceAPI_Expecter) ListNamespacesByLabel(ctx interface{}, labelSelector interface{}) *MockNamespaceAPI_ListNamespacesByLabel_Call {
	return &MockNamespaceAPI_ListNamespacesByLabel_Call{Call: _e.mock.On("ListNamespacesByLabel", ctx, labelSelector)}
}

func (_c *MockNamespaceAPI_ListNamespacesByLabel_Call) Run(run func(ctx context.Context, labelSelector string)) *MockNamespaceAPI_ListNamespacesByLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNamespaceAPI_ListNamespacesByLabel_Call) Return(_a0 []v1.Namespace, _a1 error) *MockNamespaceAPI_ListNamespacesByLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespaceAPI_ListNamespacesByLabel_Call) RunAndReturn(run func(context.Context, string) ([]v1.Namespace, error)) *MockNamespaceAPI_ListNamespacesByLabel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamespaceAPI creates a new instance of MockNamespaceAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamespaceAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamespaceAPI {
	mock := &MockNamespaceAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
